{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\n\nconst inputDatePicker = document.getElementById('datetime-picker');\nconst startButton = document.getElementById('startButton');\nconst secondsRef = document.getElementById('seconds');\nconst minutesRef = document.getElementById('minutes');\nconst hoursRef = document.getElementById('hours');\nconst daysRef = document.getElementById('days');\n\nlet timeDifference;\nlet timerId;\n\nflatpickr(inputDatePicker);\n\nstartButton.addEventListener('click', () => {\n  startTimer();\n});\n\nfunction startTimer() {\n  startButton.setAttribute('disabled', true);\n  inputDatePicker.setAttribute('disabled', true);\n\n  timeDifference -= 1000;\n\n  if (\n    parseInt(secondsRef.textContent) <= 0 &&\n    parseInt(minutesRef.textContent) <= 0 &&\n    parseInt(hoursRef.textContent) <= 0 &&\n    parseInt(daysRef.textContent) <= 0\n  ) {\n    iziToast.success({ title: 'Success', message: 'Time end' });\n    clearInterval(timerId);\n  } else {\n    const formatDate = convertMs(timeDifference);\n    renderDate(formatDate);\n  }\n}\n\nfunction renderDate(formatDate) {\n  secondsRef.textContent = formatDate.seconds;\n  minutesRef.textContent = formatDate.minutes;\n  hoursRef.textContent = formatDate.hours;\n  daysRef.textContent = formatDate.days;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n// import iziToast from 'izitoast';\n\n// const inputDatePicker = document.getElementById('datetime-picker');\n// const startButton = document.getElementById('startButton');\n// const secondsRef = document.getElementById('seconds');\n// const minutesRef = document.getElementById('minutes');\n// const hoursRef = document.getElementById('hours');\n// const daysRef = document.getElementById('days');\n\n// let timeDifference;\n// let timerId;\n\n// flatpickr(inputDatePicker, {\n//   onChange: selectedDate => {\n//     const now = new Date();\n//     const selectedDateObj = new Date(selectedDate);\n//     timeDifference = selectedDateObj.getTime() - now.getTime();\n//   },\n// });\n\n// startButton.addEventListener('click', () => {\n//   startTimer();\n// });\n\n// function startTimer() {\n//   startButton.setAttribute('disabled', true);\n//   inputDatePicker.setAttribute('disabled', true);\n\n//   timerId = setInterval(() => {\n//     timeDifference -= 1000;\n\n//     if (\n//       parseInt(secondsRef.textContent) <= 0 &&\n//       parseInt(minutesRef.textContent) <= 0 &&\n//       parseInt(hoursRef.textContent) <= 0 &&\n//       parseInt(daysRef.textContent) <= 0\n//     ) {\n//       iziToast.success({ title: 'Success', message: 'Time end' });\n//       clearInterval(timerId);\n//     } else {\n//       const formatDate = convertMs(timeDifference);\n//       renderDate(formatDate);\n//     }\n//   }, 1000);\n// }\n\n// function renderDate(formatDate) {\n//   secondsRef.textContent = formatDate.seconds;\n//   minutesRef.textContent = formatDate.minutes;\n//   hoursRef.textContent = formatDate.hours;\n//   daysRef.textContent = formatDate.days;\n// }\n\n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = Math.floor(ms / day);\n//   // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}\n"],"names":["inputDatePicker","startButton","secondsRef","minutesRef","hoursRef","daysRef","timeDifference","timerId","flatpickr","startTimer","iziToast","formatDate","convertMs","renderDate","ms","days","hours","minutes","seconds"],"mappings":"sGAIA,MAAMA,EAAkB,SAAS,eAAe,iBAAiB,EAC3DC,EAAc,SAAS,eAAe,aAAa,EACnDC,EAAa,SAAS,eAAe,SAAS,EAC9CC,EAAa,SAAS,eAAe,SAAS,EAC9CC,EAAW,SAAS,eAAe,OAAO,EAC1CC,EAAU,SAAS,eAAe,MAAM,EAE9C,IAAIC,EACAC,EAEJC,EAAUR,CAAe,EAEzBC,EAAY,iBAAiB,QAAS,IAAM,CAC1CQ,GACF,CAAC,EAED,SAASA,GAAa,CAMpB,GALAR,EAAY,aAAa,WAAY,EAAI,EACzCD,EAAgB,aAAa,WAAY,EAAI,EAE7CM,GAAkB,IAGhB,SAASJ,EAAW,WAAW,GAAK,GACpC,SAASC,EAAW,WAAW,GAAK,GACpC,SAASC,EAAS,WAAW,GAAK,GAClC,SAASC,EAAQ,WAAW,GAAK,EAEjCK,EAAS,QAAQ,CAAE,MAAO,UAAW,QAAS,UAAU,CAAE,EAC1D,cAAcH,CAAO,MAChB,CACL,MAAMI,EAAaC,EAAUN,CAAc,EAC3CO,EAAWF,CAAU,CACtB,CACH,CAEA,SAASE,EAAWF,EAAY,CAC9BT,EAAW,YAAcS,EAAW,QACpCR,EAAW,YAAcQ,EAAW,QACpCP,EAAS,YAAcO,EAAW,MAClCN,EAAQ,YAAcM,EAAW,IACnC,CAEA,SAASC,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIN,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}