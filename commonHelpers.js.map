{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nconst inputDatePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\nstartButton.disabled = true;\nlet timeDadline;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] < options.defaultDate) {\n      return iziToast.error({\n        message: 'Please choose a date in the future',\n      });\n    }\n    startButton.disabled = false;\n    timeDadline = selectedDates[0];\n  },\n};\n\nflatpickr(inputDatePicker, options);\n\nstartButton.addEventListener('click', () => {\n  startCountdown(timeDadline);\n  startButton.disabled = true;\n});\n\nlet timerId; // Объявляем переменную для идентификатора таймера\n\nfunction startCountdown(selectedDate) {\n  timerId = setInterval(() => {\n    const currentDate = Date.now();\n    const timeDifference = selectedDate - currentDate;\n\n    if (timeDifference <= 0) {\n      startButton.disabled = false;\n      clearInterval(timerId); // Очищаем интервал, если время истекло\n      iziToast.success({ title: 'Success', message: 'Time end' });\n    } else {\n      const formattedTime = formatTime(timeDifference);\n      renderTime(formattedTime);\n    }\n  }, 1000);\n}\n\nfunction formatTime(ms) {\n  const seconds = Math.floor((ms / 1000) % 60);\n  const minutes = Math.floor((ms / (1000 * 60)) % 60);\n  const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(ms / (1000 * 60 * 60 * 24));\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction renderTime({ days, hours, minutes, seconds }) {\n  daysEl.textContent = String(days).padStart(2, '0');\n  hoursEl.textContent = String(hours).padStart(2, '0');\n  minutesEl.textContent = String(minutes).padStart(2, '0');\n  secondsEl.textContent = String(seconds).padStart(2, '0');\n}\n"],"names":["inputDatePicker","startButton","daysEl","hoursEl","minutesEl","secondsEl","timeDadline","options","selectedDates","iziToast","flatpickr","startCountdown","timerId","selectedDate","currentDate","timeDifference","formattedTime","formatTime","renderTime","ms","seconds","minutes","hours","days"],"mappings":"2GAIA,MAAMA,EAAkB,SAAS,eAAe,iBAAiB,EAC3DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EACzDJ,EAAY,SAAW,GACvB,IAAIK,EACJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,EAAID,EAAQ,YAC7B,OAAOE,EAAS,MAAM,CACpB,QAAS,oCACjB,CAAO,EAEHR,EAAY,SAAW,GACvBK,EAAcE,EAAc,CAAC,CAC9B,CACH,EAEAE,EAAUV,EAAiBO,CAAO,EAElCN,EAAY,iBAAiB,QAAS,IAAM,CAC1CU,EAAeL,CAAW,EAC1BL,EAAY,SAAW,EACzB,CAAC,EAED,IAAIW,EAEJ,SAASD,EAAeE,EAAc,CACpCD,EAAU,YAAY,IAAM,CAC1B,MAAME,EAAc,KAAK,MACnBC,EAAiBF,EAAeC,EAEtC,GAAIC,GAAkB,EACpBd,EAAY,SAAW,GACvB,cAAcW,CAAO,EACrBH,EAAS,QAAQ,CAAE,MAAO,UAAW,QAAS,UAAU,CAAE,MACrD,CACL,MAAMO,EAAgBC,EAAWF,CAAc,EAC/CG,EAAWF,CAAa,CACzB,CACF,EAAE,GAAI,CACT,CAEA,SAASC,EAAWE,EAAI,CACtB,MAAMC,EAAU,KAAK,MAAOD,EAAK,IAAQ,EAAE,EACrCE,EAAU,KAAK,MAAOF,GAAM,IAAO,IAAO,EAAE,EAC5CG,EAAQ,KAAK,MAAOH,GAAM,IAAO,GAAK,IAAO,EAAE,EAGrD,MAAO,CAAE,KAFI,KAAK,MAAMA,GAAM,IAAO,GAAK,GAAK,GAAG,EAEnC,MAAAG,EAAO,QAAAD,EAAS,QAAAD,CAAO,CACxC,CAEA,SAASF,EAAW,CAAE,KAAAK,EAAM,MAAAD,EAAO,QAAAD,EAAS,QAAAD,CAAO,EAAI,CACrDlB,EAAO,YAAc,OAAOqB,CAAI,EAAE,SAAS,EAAG,GAAG,EACjDpB,EAAQ,YAAc,OAAOmB,CAAK,EAAE,SAAS,EAAG,GAAG,EACnDlB,EAAU,YAAc,OAAOiB,CAAO,EAAE,SAAS,EAAG,GAAG,EACvDhB,EAAU,YAAc,OAAOe,CAAO,EAAE,SAAS,EAAG,GAAG,CACzD"}